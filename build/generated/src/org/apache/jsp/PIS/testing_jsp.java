package org.apache.jsp.PIS;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class testing_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List<String> _jspx_dependants;

  private org.glassfish.jsp.api.ResourceInjector _jspx_resourceInjector;

  public java.util.List<String> getDependants() {
    return _jspx_dependants;
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;

    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;
      _jspx_resourceInjector = (org.glassfish.jsp.api.ResourceInjector) application.getAttribute("com.sun.appserv.jsp.resource.injector");

      out.write("<!DOCTYPE html>\n");
      out.write("<!-- xlsx.js (C) 2013-present  SheetJS http://sheetjs.com -->\n");
      out.write("<!-- vim: set ts=2: -->\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n");
      out.write("<title>JS-XLSX Live Demo</title>\n");
      out.write("<style>\n");
      out.write("#drop{\n");
      out.write("\tborder:2px dashed #bbb;\n");
      out.write("\t-moz-border-radius:5px;\n");
      out.write("\t-webkit-border-radius:5px;\n");
      out.write("\tborder-radius:5px;\n");
      out.write("\tpadding:25px;\n");
      out.write("\ttext-align:center;\n");
      out.write("\tfont:20pt bold,\"Vollkorn\";color:#bbb\n");
      out.write("}\n");
      out.write("#b64data{\n");
      out.write("\twidth:100%;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<b>JS-XLSX Live Demo</b><br />\n");
      out.write("Output Format:\n");
      out.write("<select name=\"format\">\n");
      out.write("<option value=\"csv\" selected> CSV</option>\n");
      out.write("<option value=\"json\"> JSON</option>\n");
      out.write("<option value=\"form\"> FORMULAE</option>\n");
      out.write("</select><br />\n");
      out.write("\n");
      out.write("<div id=\"drop\">Drop a spreadsheet file here to see sheet data</div>\n");
      out.write("<p><input type=\"file\" name=\"xlfile\" id=\"xlf\" /> ... or click here to select a file</p>\n");
      out.write("<textarea id=\"b64data\">... or paste a base64-encoding here</textarea>\n");
      out.write("<input type=\"button\" id=\"dotext\" value=\"Click here to process the base64 text\" onclick=\"b64it();\"/><br />\n");
      out.write("Advanced Demo Options: <br />\n");
      out.write("Use Web Workers: (when available) <input type=\"checkbox\" name=\"useworker\" checked><br />\n");
      out.write("Use Transferrables: (when available) <input type=\"checkbox\" name=\"xferable\" checked><br />\n");
      out.write("Use readAsBinaryString: (when available) <input type=\"checkbox\" name=\"userabs\" checked><br />\n");
      out.write("<pre id=\"out\"></pre>\n");
      out.write("<br />\n");
      out.write("<!-- uncomment the next line here and in xlsxworker.js for encoding support -->\n");
      out.write("<script src=\"dist/cpexcel.js\"></script>\n");
      out.write("<script src=\"shim.js\"></script>\n");
      out.write("<script src=\"jszip.js\"></script>\n");
      out.write("<script src=\"xlsx.js\"></script>\n");
      out.write("<script>\n");
      out.write("/*jshint browser:true */\n");
      out.write("/*global XLSX */\n");
      out.write("\n");
      out.write("var X = XLSX;\n");
      out.write("var XW = {\n");
      out.write("\t/* worker message */\n");
      out.write("\tmsg: 'xlsx',\n");
      out.write("\t/* worker scripts */\n");
      out.write("\trABS: './xlsxworker2.js',\n");
      out.write("\tnorABS: './xlsxworker1.js',\n");
      out.write("\tnoxfer: './xlsxworker.js'\n");
      out.write("};\n");
      out.write("var rABS = typeof FileReader !== \"undefined\" && typeof FileReader.prototype !== \"undefined\" && typeof FileReader.prototype.readAsBinaryString !== \"undefined\";\n");
      out.write("if(!rABS) {\n");
      out.write("\tdocument.getElementsByName(\"userabs\")[0].disabled = true;\n");
      out.write("\tdocument.getElementsByName(\"userabs\")[0].checked = false;\n");
      out.write("}\n");
      out.write("var use_worker = typeof Worker !== 'undefined';\n");
      out.write("if(!use_worker) {\n");
      out.write("\tdocument.getElementsByName(\"useworker\")[0].disabled = true;\n");
      out.write("\tdocument.getElementsByName(\"useworker\")[0].checked = false;\n");
      out.write("}\n");
      out.write("var transferable = use_worker;\n");
      out.write("if(!transferable) {\n");
      out.write("\tdocument.getElementsByName(\"xferable\")[0].disabled = true;\n");
      out.write("\tdocument.getElementsByName(\"xferable\")[0].checked = false;\n");
      out.write("}\n");
      out.write("var wtf_mode = false;\n");
      out.write("function fixdata(data) {\n");
      out.write("\tvar o = \"\", l = 0, w = 10240;\n");
      out.write("\tfor(; l<data.byteLength/w; ++l) o+=String.fromCharCode.apply(null,new Uint8Array(data.slice(l*w,l*w+w)));\n");
      out.write("\to+=String.fromCharCode.apply(null, new Uint8Array(data.slice(l*w)));\n");
      out.write("\treturn o;\n");
      out.write("}\n");
      out.write("function ab2str(data) {\n");
      out.write("\tvar o = \"\", l = 0, w = 10240;\n");
      out.write("\tfor(; l<data.byteLength/w; ++l) o+=String.fromCharCode.apply(null,new Uint16Array(data.slice(l*w,l*w+w)));\n");
      out.write("\to+=String.fromCharCode.apply(null, new Uint16Array(data.slice(l*w)));\n");
      out.write("\treturn o;\n");
      out.write("}\n");
      out.write("function s2ab(s) {\n");
      out.write("\tvar b = new ArrayBuffer(s.length*2), v = new Uint16Array(b);\n");
      out.write("\tfor (var i=0; i != s.length; ++i) v[i] = s.charCodeAt(i);\n");
      out.write("\treturn [v, b];\n");
      out.write("}\n");
      out.write("function xw_noxfer(data, cb) {\n");
      out.write("\tvar worker = new Worker(XW.noxfer);\n");
      out.write("\tworker.onmessage = function(e) {\n");
      out.write("\t\tswitch(e.data.t) {\n");
      out.write("\t\t\tcase 'ready': break;\n");
      out.write("\t\t\tcase 'e': console.error(e.data.d); break;\n");
      out.write("\t\t\tcase XW.msg: cb(JSON.parse(e.data.d)); break;\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("\tvar arr = rABS ? data : btoa(fixdata(data));\n");
      out.write("\tworker.postMessage({d:arr,b:rABS});\n");
      out.write("}\n");
      out.write("function xw_xfer(data, cb) {\n");
      out.write("\tvar worker = new Worker(rABS ? XW.rABS : XW.norABS);\n");
      out.write("\tworker.onmessage = function(e) {\n");
      out.write("\t\tswitch(e.data.t) {\n");
      out.write("\t\t\tcase 'ready': break;\n");
      out.write("\t\t\tcase 'e': console.error(e.data.d); break;\n");
      out.write("\t\t\tdefault: xx=ab2str(e.data).replace(/\\n/g,\"\\\\n\").replace(/\\r/g,\"\\\\r\"); console.log(\"done\"); cb(JSON.parse(xx)); break;\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("\tif(rABS) {\n");
      out.write("\t\tvar val = s2ab(data);\n");
      out.write("\t\tworker.postMessage(val[1], [val[1]]);\n");
      out.write("\t} else {\n");
      out.write("\t\tworker.postMessage(data, [data]);\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("function xw(data, cb) {\n");
      out.write("\ttransferable = document.getElementsByName(\"xferable\")[0].checked;\n");
      out.write("\tif(transferable) xw_xfer(data, cb);\n");
      out.write("\telse xw_noxfer(data, cb);\n");
      out.write("}\n");
      out.write("function get_radio_value( radioName ) {\n");
      out.write("\tvar radios = document.getElementsByName( radioName );\n");
      out.write("\tfor( var i = 0; i < radios.length; i++ ) {\n");
      out.write("\t\tif( radios[i].checked || radios.length === 1 ) {\n");
      out.write("\t\t\treturn radios[i].value;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("function to_json(workbook) {\n");
      out.write("\tvar result = {};\n");
      out.write("\tworkbook.SheetNames.forEach(function(sheetName) {\n");
      out.write("\t\tvar roa = X.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);\n");
      out.write("\t\tif(roa.length > 0){\n");
      out.write("\t\t\tresult[sheetName] = roa;\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("\treturn result;\n");
      out.write("}\n");
      out.write("function to_csv(workbook) {\n");
      out.write("\tvar result = [];\n");
      out.write("\tworkbook.SheetNames.forEach(function(sheetName) {\n");
      out.write("\t\tvar csv = X.utils.sheet_to_csv(workbook.Sheets[sheetName]);\n");
      out.write("\t\tif(csv.length > 0){\n");
      out.write("\t\t\tresult.push(\"SHEET: \" + sheetName);\n");
      out.write("\t\t\tresult.push(\"\");\n");
      out.write("\t\t\tresult.push(csv);\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("\treturn result.join(\"\\n\");\n");
      out.write("}\n");
      out.write("function to_formulae(workbook) {\n");
      out.write("\tvar result = [];\n");
      out.write("\tworkbook.SheetNames.forEach(function(sheetName) {\n");
      out.write("\t\tvar formulae = X.utils.get_formulae(workbook.Sheets[sheetName]);\n");
      out.write("\t\tif(formulae.length > 0){\n");
      out.write("\t\t\tresult.push(\"SHEET: \" + sheetName);\n");
      out.write("\t\t\tresult.push(\"\");\n");
      out.write("\t\t\tresult.push(formulae.join(\"\\n\"));\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("\treturn result.join(\"\\n\");\n");
      out.write("}\n");
      out.write("var tarea = document.getElementById('b64data');\n");
      out.write("function b64it() {\n");
      out.write("\tif(typeof console !== 'undefined') console.log(\"onload\", new Date());\n");
      out.write("\tvar wb = X.read(tarea.value, {type: 'base64',WTF:wtf_mode});\n");
      out.write("\tprocess_wb(wb);\n");
      out.write("}\n");
      out.write("function process_wb(wb) {\n");
      out.write("\tvar output = \"\";\n");
      out.write("\tswitch(get_radio_value(\"format\")) {\n");
      out.write("\t\tcase \"json\":\n");
      out.write("\t\t\toutput = JSON.stringify(to_json(wb), 2, 2);\n");
      out.write("\t\t\tbreak;\n");
      out.write("\t\tcase \"form\":\n");
      out.write("\t\t\toutput = to_formulae(wb);\n");
      out.write("\t\t\tbreak;\n");
      out.write("\t\tdefault:\n");
      out.write("\t\t\toutput = to_csv(wb);\n");
      out.write("\t}\n");
      out.write("\tif(out.innerText === undefined) out.textContent = output;\n");
      out.write("\telse out.innerText = output;\n");
      out.write("\tif(typeof console !== 'undefined') console.log(\"output\", new Date());\n");
      out.write("}\n");
      out.write("var drop = document.getElementById('drop');\n");
      out.write("function handleDrop(e) {\n");
      out.write("\te.stopPropagation();\n");
      out.write("\te.preventDefault();\n");
      out.write("\trABS = document.getElementsByName(\"userabs\")[0].checked;\n");
      out.write("\tuse_worker = document.getElementsByName(\"useworker\")[0].checked;\n");
      out.write("\tvar files = e.dataTransfer.files;\n");
      out.write("\tvar f = files[0];\n");
      out.write("\t{\n");
      out.write("\t\tvar reader = new FileReader();\n");
      out.write("\t\tvar name = f.name;\n");
      out.write("\t\treader.onload = function(e) {\n");
      out.write("\t\t\tif(typeof console !== 'undefined') console.log(\"onload\", new Date(), rABS, use_worker);\n");
      out.write("\t\t\tvar data = e.target.result;\n");
      out.write("\t\t\tif(use_worker) {\n");
      out.write("\t\t\t\txw(data, process_wb);\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tvar wb;\n");
      out.write("\t\t\t\tif(rABS) {\n");
      out.write("\t\t\t\t\twb = X.read(data, {type: 'binary'});\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tvar arr = fixdata(data);\n");
      out.write("\t\t\t\t\twb = X.read(btoa(arr), {type: 'base64'});\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tprocess_wb(wb);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\t\tif(rABS) reader.readAsBinaryString(f);\n");
      out.write("\t\telse reader.readAsArrayBuffer(f);\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("function handleDragover(e) {\n");
      out.write("\te.stopPropagation();\n");
      out.write("\te.preventDefault();\n");
      out.write("\te.dataTransfer.dropEffect = 'copy';\n");
      out.write("}\n");
      out.write("if(drop.addEventListener) {\n");
      out.write("\tdrop.addEventListener('dragenter', handleDragover, false);\n");
      out.write("\tdrop.addEventListener('dragover', handleDragover, false);\n");
      out.write("\tdrop.addEventListener('drop', handleDrop, false);\n");
      out.write("}\n");
      out.write("var xlf = document.getElementById('xlf');\n");
      out.write("function handleFile(e) {\n");
      out.write("\trABS = document.getElementsByName(\"userabs\")[0].checked;\n");
      out.write("\tuse_worker = document.getElementsByName(\"useworker\")[0].checked;\n");
      out.write("\tvar files = e.target.files;\n");
      out.write("\tvar f = files[0];\n");
      out.write("\t{\n");
      out.write("\t\tvar reader = new FileReader();\n");
      out.write("\t\tvar name = f.name;\n");
      out.write("\t\treader.onload = function(e) {\n");
      out.write("\t\t\tif(typeof console !== 'undefined') console.log(\"onload\", new Date(), rABS, use_worker);\n");
      out.write("\t\t\tvar data = e.target.result;\n");
      out.write("\t\t\tif(use_worker) {\n");
      out.write("\t\t\t\txw(data, process_wb);\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tvar wb;\n");
      out.write("\t\t\t\tif(rABS) {\n");
      out.write("\t\t\t\t\twb = X.read(data, {type: 'binary'});\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tvar arr = fixdata(data);\n");
      out.write("\t\t\t\t\twb = X.read(btoa(arr), {type: 'base64'});\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tprocess_wb(wb);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\t\tif(rABS) reader.readAsBinaryString(f);\n");
      out.write("\t\telse reader.readAsArrayBuffer(f);\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("if(xlf.addEventListener) xlf.addEventListener('change', handleFile, false);\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          out.clearBuffer();
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
